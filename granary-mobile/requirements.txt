Here’s the revised **well-detailed prompt** where the instruction is for all screens, components, and the UI to mirror the web app directly without explicitly specifying a "Home Screen" or individual screens:

---

### **Detailed Prompt for Cursor AI**

"I want to create a **React Native mobile app** using **Expo** that mirrors my existing **ReactJS IoT Smart Granary System web app**. The mobile app should replicate the same **UI organization, design, and components** as the web app to ensure consistency. My web app uses **Tailwind CSS** for styling, so the mobile app must use a React Native-compatible version of Tailwind CSS. The mobile app will use static data for visualization and will be built step by step to minimize errors. I do not want to modify the existing ReactJS codebase; instead, the mobile app should be housed in a separate directory called `granary-mobile`. Below are the detailed requirements:

---

### 1. **Create the Expo App**
- Use the following command to initialize the mobile app:
  ```bash
  npx create-expo-app granary-mobile --template blank
  ```
- This will create a blank Expo app named `granary-mobile`.

---

### 2. **Set Up the Folder Structure**
Organize the project with the following folder structure to maintain clarity and facilitate reusability:

```
granary-mobile/
│
├── assets/                # Assets folder for images, fonts, etc.
│   ├── images/            # Shared images
│   ├── fonts/             # Custom fonts (if needed)
│
├── src/                   # Main source folder
│   ├── components/        # Shared components
│   │   ├── Header.js      # Example: Header component
│   │   ├── Footer.js      # Example: Footer component
│   │
│   ├── navigation/        # Navigation setup
│   │   ├── AppNavigator.js # Main navigation container
│   │
│   ├── screens/           # App screens
│   │   ├── Screen1.js     # Corresponds to web app page 1
│   │   ├── Screen2.js     # Corresponds to web app page 2
│   │
│   ├── styles/            # Shared styles or Tailwind setup
│   │   ├── tailwind.config.js # Tailwind CSS configuration
│   │
│   ├── data/              # Static or mock data
│   │   ├── staticData.js  # Example: JSON or JS file for data
│   │
│   ├── App.js             # Entry point of the app
│
├── package.json           # Project configuration
├── .gitignore             # Files to ignore in Git
├── README.md              # Project documentation
```

- The `src/screens/` folder will contain screens corresponding to the web app pages.
- The `src/components/` folder will contain shared components that match the UI components of the web app.

---

### 3. **Replicate the Web App UI**
1. All **screens, components, layouts, and UI elements** in the mobile app must **exactly replicate** the structure and organization of the web app pages.
2. Use the **same static data** for visualization as in the web app.
3. Ensure **responsiveness** and proper alignment for mobile devices while maintaining the same visual style.

---

### 4. **Set Up Tailwind CSS**
To ensure the mobile app has the same styling framework as the web app, set up **Tailwind CSS for React Native**:

1. Install the Tailwind CSS dependencies:
   ```bash
   npm install tailwindcss-react-native
   ```

2. Initialize a `tailwind.config.js` file:
   ```bash
   npx tailwindcss init
   ```

3. Modify the `tailwind.config.js` to include React Native compatibility:
   ```javascript
   module.exports = {
       content: ["./src/**/*.{js,jsx,ts,tsx}"],
       theme: {
           extend: {},
       },
       plugins: [],
   };
   ```

4. Set up Tailwind in the app by wrapping the app's main component with a `TailwindProvider`:
   - Import the provider:
     ```javascript
     import { TailwindProvider } from 'tailwindcss-react-native';
     ```

5. Test styling by applying Tailwind classes like `bg-blue-500` or `text-lg` to components.

---

### 5. **Install Additional Dependencies**
Install these essential dependencies:

1. **React Navigation** (for screen navigation):
   ```bash
   npm install @react-navigation/native
   npm install react-native-screens react-native-safe-area-context react-native-gesture-handler react-native-reanimated react-native-get-random-values
   ```

2. **Optional Expo Fonts** (for custom fonts):
   ```bash
   expo install expo-font
   ```

---

### 6. **Build Step by Step**
- Start by replicating the general **navigation structure** of the web app.
- For every page in the web app:
  - Create a corresponding screen in the `src/screens/` folder.
  - Use React Native components (e.g., `View`, `Text`, `Image`, `ScrollView`) and apply Tailwind CSS to replicate the page layout and styling as closely as possible.
  - Ensure the **data visualization and UI interactions** are identical to the web app.

---

### 7. **Static Data Handling**
1. Create a `data/` folder under `src/`.
2. Add the static data (e.g., JSON or JavaScript files) used in the web app.
3. Use this data for populating the mobile app's screens, ensuring the content matches the web app.

---

### 8. **Test and Debug**
1. Start the development server:
   ```bash
   npm start
   ```
   or
   ```bash
   expo start
   ```

2. Test the app on:
   - **Physical Devices**: Install Expo Go and scan the QR code.
   - **Emulators**: Use Android Studio or Xcode for testing.

3. After each screen is added or updated, verify the layout, styles, and functionality against the web app.

---

### 9. **Key Considerations**
- **UI Consistency**:
  - The mobile app screens and components must exactly mirror the design and layout of the web app.
  - Use Tailwind CSS to maintain styling consistency.

- **Reusability**:
  - Move shared UI components (e.g., headers, footers, buttons) into the `src/components/` folder for reuse across screens.

- **Error Minimization**:
  - Build and test the app step by step, screen by screen, ensuring each screen works as expected before proceeding.

---

Please generate a React Native app (`granary-mobile`) using the above instructions. Ensure the mobile app screens, components, and overall UI **match the web app as closely as possible** in terms of layout, styling, and data visualization."

---

This prompt now includes the requirement for Cursor AI to directly replicate the UI, components, and organization of the web app in the mobile app.